{"version":3,"sources":["angular:jit:template:src/app/components/error-message/error-message.html","node_modules/@angular/animations/fesm2022/private_export.mjs","node_modules/@angular/animations/fesm2022/animations.mjs","node_modules/primeng/fesm2022/primeng-message.mjs","src/app/components/error-message/error-message.ts"],"sourcesContent":["<p-message severity=\"error\" class=\"relative bottom-14 flex items-baseline p-2\" size=\"large\">\n  <i class=\"pi pi-exclamation-triangle\" [style.fontSize.rem]=\"1.25\"></i>\n  {{ message() }}\n</p-message>\n","/**\n * @license Angular v20.2.1\n * (c) 2010-2025 Google LLC. https://angular.io/\n * License: MIT\n */\n\n/**\n * @description Constants for the categories of parameters that can be defined for animations.\n *\n * A corresponding function defines a set of parameters for each category, and\n * collects them into a corresponding `AnimationMetadata` object.\n *\n * @publicApi\n *\n * @deprecated 20.2 Use `animate.enter` or `animate.leave` instead. Intent to remove in v23\n */\nvar AnimationMetadataType;\n(function (AnimationMetadataType) {\n    /**\n     * Associates a named animation state with a set of CSS styles.\n     * See [`state()`](api/animations/state)\n     */\n    AnimationMetadataType[AnimationMetadataType[\"State\"] = 0] = \"State\";\n    /**\n     * Data for a transition from one animation state to another.\n     * See `transition()`\n     */\n    AnimationMetadataType[AnimationMetadataType[\"Transition\"] = 1] = \"Transition\";\n    /**\n     * Contains a set of animation steps.\n     * See `sequence()`\n     */\n    AnimationMetadataType[AnimationMetadataType[\"Sequence\"] = 2] = \"Sequence\";\n    /**\n     * Contains a set of animation steps.\n     * See `group()`\n     */\n    AnimationMetadataType[AnimationMetadataType[\"Group\"] = 3] = \"Group\";\n    /**\n     * Contains an animation step.\n     * See `animate()`\n     */\n    AnimationMetadataType[AnimationMetadataType[\"Animate\"] = 4] = \"Animate\";\n    /**\n     * Contains a set of animation steps.\n     * See `keyframes()`\n     */\n    AnimationMetadataType[AnimationMetadataType[\"Keyframes\"] = 5] = \"Keyframes\";\n    /**\n     * Contains a set of CSS property-value pairs into a named style.\n     * See `style()`\n     */\n    AnimationMetadataType[AnimationMetadataType[\"Style\"] = 6] = \"Style\";\n    /**\n     * Associates an animation with an entry trigger that can be attached to an element.\n     * See `trigger()`\n     */\n    AnimationMetadataType[AnimationMetadataType[\"Trigger\"] = 7] = \"Trigger\";\n    /**\n     * Contains a re-usable animation.\n     * See `animation()`\n     */\n    AnimationMetadataType[AnimationMetadataType[\"Reference\"] = 8] = \"Reference\";\n    /**\n     * Contains data to use in executing child animations returned by a query.\n     * See `animateChild()`\n     */\n    AnimationMetadataType[AnimationMetadataType[\"AnimateChild\"] = 9] = \"AnimateChild\";\n    /**\n     * Contains animation parameters for a re-usable animation.\n     * See `useAnimation()`\n     */\n    AnimationMetadataType[AnimationMetadataType[\"AnimateRef\"] = 10] = \"AnimateRef\";\n    /**\n     * Contains child-animation query data.\n     * See `query()`\n     */\n    AnimationMetadataType[AnimationMetadataType[\"Query\"] = 11] = \"Query\";\n    /**\n     * Contains data for staggering an animation sequence.\n     * See `stagger()`\n     */\n    AnimationMetadataType[AnimationMetadataType[\"Stagger\"] = 12] = \"Stagger\";\n})(AnimationMetadataType || (AnimationMetadataType = {}));\n/**\n * Specifies automatic styling.\n *\n * @publicApi\n *\n * @deprecated 20.2 Use `animate.enter` or `animate.leave` instead. Intent to remove in v23\n */\nconst AUTO_STYLE = '*';\n/**\n * Creates a named animation trigger, containing a  list of [`state()`](api/animations/state)\n * and `transition()` entries to be evaluated when the expression\n * bound to the trigger changes.\n *\n * @param name An identifying string.\n * @param definitions  An animation definition object, containing an array of\n * [`state()`](api/animations/state) and `transition()` declarations.\n *\n * @return An object that encapsulates the trigger data.\n *\n * @usageNotes\n * Define an animation trigger in the `animations` section of `@Component` metadata.\n * In the template, reference the trigger by name and bind it to a trigger expression that\n * evaluates to a defined animation state, using the following format:\n *\n * `[@triggerName]=\"expression\"`\n *\n * Animation trigger bindings convert all values to strings, and then match the\n * previous and current values against any linked transitions.\n * Booleans can be specified as `1` or `true` and `0` or `false`.\n *\n * ### Usage Example\n *\n * The following example creates an animation trigger reference based on the provided\n * name value.\n * The provided animation value is expected to be an array consisting of state and\n * transition declarations.\n *\n * ```ts\n * @Component({\n *   selector: \"my-component\",\n *   templateUrl: \"my-component-tpl.html\",\n *   animations: [\n *     trigger(\"myAnimationTrigger\", [\n *       state(...),\n *       state(...),\n *       transition(...),\n *       transition(...)\n *     ])\n *   ]\n * })\n * class MyComponent {\n *   myStatusExp = \"something\";\n * }\n * ```\n *\n * The template associated with this component makes use of the defined trigger\n * by binding to an element within its template code.\n *\n * ```html\n * <!-- somewhere inside of my-component-tpl.html -->\n * <div [@myAnimationTrigger]=\"myStatusExp\">...</div>\n * ```\n *\n * ### Using an inline function\n * The `transition` animation method also supports reading an inline function which can decide\n * if its associated animation should be run.\n *\n * ```ts\n * // this method is run each time the `myAnimationTrigger` trigger value changes.\n * function myInlineMatcherFn(fromState: string, toState: string, element: any, params: {[key:\n string]: any}): boolean {\n *   // notice that `element` and `params` are also available here\n *   return toState == 'yes-please-animate';\n * }\n *\n * @Component({\n *   selector: 'my-component',\n *   templateUrl: 'my-component-tpl.html',\n *   animations: [\n *     trigger('myAnimationTrigger', [\n *       transition(myInlineMatcherFn, [\n *         // the animation sequence code\n *       ]),\n *     ])\n *   ]\n * })\n * class MyComponent {\n *   myStatusExp = \"yes-please-animate\";\n * }\n * ```\n *\n * ### Disabling Animations\n * When true, the special animation control binding `@.disabled` binding prevents\n * all animations from rendering.\n * Place the  `@.disabled` binding on an element to disable\n * animations on the element itself, as well as any inner animation triggers\n * within the element.\n *\n * The following example shows how to use this feature:\n *\n * ```angular-ts\n * @Component({\n *   selector: 'my-component',\n *   template: `\n *     <div [@.disabled]=\"isDisabled\">\n *       <div [@childAnimation]=\"exp\"></div>\n *     </div>\n *   `,\n *   animations: [\n *     trigger(\"childAnimation\", [\n *       // ...\n *     ])\n *   ]\n * })\n * class MyComponent {\n *   isDisabled = true;\n *   exp = '...';\n * }\n * ```\n *\n * When `@.disabled` is true, it prevents the `@childAnimation` trigger from animating,\n * along with any inner animations.\n *\n * ### Disable animations application-wide\n * When an area of the template is set to have animations disabled,\n * **all** inner components have their animations disabled as well.\n * This means that you can disable all animations for an app\n * by placing a host binding set on `@.disabled` on the topmost Angular component.\n *\n * ```ts\n * import {Component, HostBinding} from '@angular/core';\n *\n * @Component({\n *   selector: 'app-component',\n *   templateUrl: 'app.component.html',\n * })\n * class AppComponent {\n *   @HostBinding('@.disabled')\n *   public animationsDisabled = true;\n * }\n * ```\n *\n * ### Overriding disablement of inner animations\n * Despite inner animations being disabled, a parent animation can `query()`\n * for inner elements located in disabled areas of the template and still animate\n * them if needed. This is also the case for when a sub animation is\n * queried by a parent and then later animated using `animateChild()`.\n *\n * ### Detecting when an animation is disabled\n * If a region of the DOM (or the entire application) has its animations disabled, the animation\n * trigger callbacks still fire, but for zero seconds. When the callback fires, it provides\n * an instance of an `AnimationEvent`. If animations are disabled,\n * the `.disabled` flag on the event is true.\n *\n * @publicApi\n *\n * @deprecated 20.2 Use `animate.enter` or `animate.leave` instead. Intent to remove in v23\n */\nfunction trigger(name, definitions) {\n    return { type: AnimationMetadataType.Trigger, name, definitions, options: {} };\n}\n/**\n * Defines an animation step that combines styling information with timing information.\n *\n * @param timings Sets `AnimateTimings` for the parent animation.\n * A string in the format \"duration [delay] [easing]\".\n *  - Duration and delay are expressed as a number and optional time unit,\n * such as \"1s\" or \"10ms\" for one second and 10 milliseconds, respectively.\n * The default unit is milliseconds.\n *  - The easing value controls how the animation accelerates and decelerates\n * during its runtime. Value is one of  `ease`, `ease-in`, `ease-out`,\n * `ease-in-out`, or a `cubic-bezier()` function call.\n * If not supplied, no easing is applied.\n *\n * For example, the string \"1s 100ms ease-out\" specifies a duration of\n * 1000 milliseconds, and delay of 100 ms, and the \"ease-out\" easing style,\n * which decelerates near the end of the duration.\n * @param styles Sets AnimationStyles for the parent animation.\n * A function call to either `style()` or `keyframes()`\n * that returns a collection of CSS style entries to be applied to the parent animation.\n * When null, uses the styles from the destination state.\n * This is useful when describing an animation step that will complete an animation;\n * see \"Animating to the final state\" in `transitions()`.\n * @returns An object that encapsulates the animation step.\n *\n * @usageNotes\n * Call within an animation `sequence()`, {@link /api/animations/group group()}, or\n * `transition()` call to specify an animation step\n * that applies given style data to the parent animation for a given amount of time.\n *\n * ### Syntax Examples\n * **Timing examples**\n *\n * The following examples show various `timings` specifications.\n * - `animate(500)` : Duration is 500 milliseconds.\n * - `animate(\"1s\")` : Duration is 1000 milliseconds.\n * - `animate(\"100ms 0.5s\")` : Duration is 100 milliseconds, delay is 500 milliseconds.\n * - `animate(\"5s ease-in\")` : Duration is 5000 milliseconds, easing in.\n * - `animate(\"5s 10ms cubic-bezier(.17,.67,.88,.1)\")` : Duration is 5000 milliseconds, delay is 10\n * milliseconds, easing according to a bezier curve.\n *\n * **Style examples**\n *\n * The following example calls `style()` to set a single CSS style.\n * ```ts\n * animate(500, style({ background: \"red\" }))\n * ```\n * The following example calls `keyframes()` to set a CSS style\n * to different values for successive keyframes.\n * ```ts\n * animate(500, keyframes(\n *  [\n *   style({ background: \"blue\" }),\n *   style({ background: \"red\" })\n *  ])\n * ```\n *\n * @publicApi\n *\n * @deprecated 20.2 Use `animate.enter` or `animate.leave` instead. Intent to remove in v23\n */\nfunction animate(timings, styles = null) {\n    return { type: AnimationMetadataType.Animate, styles, timings };\n}\n/**\n * @description Defines a list of animation steps to be run in parallel.\n *\n * @param steps An array of animation step objects.\n * - When steps are defined by `style()` or `animate()`\n * function calls, each call within the group is executed instantly.\n * - To specify offset styles to be applied at a later time, define steps with\n * `keyframes()`, or use `animate()` calls with a delay value.\n * For example:\n *\n * ```ts\n * group([\n *   animate(\"1s\", style({ background: \"black\" })),\n *   animate(\"2s\", style({ color: \"white\" }))\n * ])\n * ```\n *\n * @param options An options object containing a delay and\n * developer-defined parameters that provide styling defaults and\n * can be overridden on invocation.\n *\n * @return An object that encapsulates the group data.\n *\n * @usageNotes\n * Grouped animations are useful when a series of styles must be\n * animated at different starting times and closed off at different ending times.\n *\n * When called within a `sequence()` or a\n * `transition()` call, does not continue to the next\n * instruction until all of the inner animation steps have completed.\n *\n * @publicApi\n *\n * @deprecated 20.2 Use `animate.enter` or `animate.leave` instead. Intent to remove in v23\n */\nfunction group(steps, options = null) {\n    return { type: AnimationMetadataType.Group, steps, options };\n}\n/**\n * Defines a list of animation steps to be run sequentially, one by one.\n *\n * @param steps An array of animation step objects.\n * - Steps defined by `style()` calls apply the styling data immediately.\n * - Steps defined by `animate()` calls apply the styling data over time\n *   as specified by the timing data.\n *\n * ```ts\n * sequence([\n *   style({ opacity: 0 }),\n *   animate(\"1s\", style({ opacity: 1 }))\n * ])\n * ```\n *\n * @param options An options object containing a delay and\n * developer-defined parameters that provide styling defaults and\n * can be overridden on invocation.\n *\n * @return An object that encapsulates the sequence data.\n *\n * @usageNotes\n * When you pass an array of steps to a\n * `transition()` call, the steps run sequentially by default.\n * Compare this to the  {@link /api/animations/group group()} call, which runs animation steps in\n *parallel.\n *\n * When a sequence is used within a  {@link /api/animations/group group()} or a `transition()` call,\n * execution continues to the next instruction only after each of the inner animation\n * steps have completed.\n *\n * @publicApi\n *\n * @deprecated 20.2 Use `animate.enter` or `animate.leave` instead. Intent to remove in v23\n **/\nfunction sequence(steps, options = null) {\n    return { type: AnimationMetadataType.Sequence, steps, options };\n}\n/**\n * Declares a key/value object containing CSS properties/styles that\n * can then be used for an animation [`state`](api/animations/state), within an animation\n *`sequence`, or as styling data for calls to `animate()` and `keyframes()`.\n *\n * @param tokens A set of CSS styles or HTML styles associated with an animation state.\n * The value can be any of the following:\n * - A key-value style pair associating a CSS property with a value.\n * - An array of key-value style pairs.\n * - An asterisk (*), to use auto-styling, where styles are derived from the element\n * being animated and applied to the animation when it starts.\n *\n * Auto-styling can be used to define a state that depends on layout or other\n * environmental factors.\n *\n * @return An object that encapsulates the style data.\n *\n * @usageNotes\n * The following examples create animation styles that collect a set of\n * CSS property values:\n *\n * ```ts\n * // string values for CSS properties\n * style({ background: \"red\", color: \"blue\" })\n *\n * // numerical pixel values\n * style({ width: 100, height: 0 })\n * ```\n *\n * The following example uses auto-styling to allow an element to animate from\n * a height of 0 up to its full height:\n *\n * ```ts\n * style({ height: 0 }),\n * animate(\"1s\", style({ height: \"*\" }))\n * ```\n *\n * @publicApi\n *\n * @deprecated 20.2 Use `animate.enter` or `animate.leave` instead. Intent to remove in v23\n **/\nfunction style(tokens) {\n    return { type: AnimationMetadataType.Style, styles: tokens, offset: null };\n}\n/**\n * Declares an animation state within a trigger attached to an element.\n *\n * @param name One or more names for the defined state in a comma-separated string.\n * The following reserved state names can be supplied to define a style for specific use\n * cases:\n *\n * - `void` You can associate styles with this name to be used when\n * the element is detached from the application. For example, when an `ngIf` evaluates\n * to false, the state of the associated element is void.\n *  - `*` (asterisk) Indicates the default state. You can associate styles with this name\n * to be used as the fallback when the state that is being animated is not declared\n * within the trigger.\n *\n * @param styles A set of CSS styles associated with this state, created using the\n * `style()` function.\n * This set of styles persists on the element once the state has been reached.\n * @param options Parameters that can be passed to the state when it is invoked.\n * 0 or more key-value pairs.\n * @return An object that encapsulates the new state data.\n *\n * @usageNotes\n * Use the `trigger()` function to register states to an animation trigger.\n * Use the `transition()` function to animate between states.\n * When a state is active within a component, its associated styles persist on the element,\n * even when the animation ends.\n *\n * @publicApi\n *\n * @deprecated 20.2 Use `animate.enter` or `animate.leave` instead. Intent to remove in v23\n **/\nfunction state(name, styles, options) {\n    return { type: AnimationMetadataType.State, name, styles, options };\n}\n/**\n * Defines a set of animation styles, associating each style with an optional `offset` value.\n *\n * @param steps A set of animation styles with optional offset data.\n * The optional `offset` value for a style specifies a percentage of the total animation\n * time at which that style is applied.\n * @returns An object that encapsulates the keyframes data.\n *\n * @usageNotes\n * Use with the `animate()` call. Instead of applying animations\n * from the current state\n * to the destination state, keyframes describe how each style entry is applied and at what point\n * within the animation arc.\n * Compare [CSS Keyframe Animations](https://www.w3schools.com/css/css3_animations.asp).\n *\n * ### Usage\n *\n * In the following example, the offset values describe\n * when each `backgroundColor` value is applied. The color is red at the start, and changes to\n * blue when 20% of the total time has elapsed.\n *\n * ```ts\n * // the provided offset values\n * animate(\"5s\", keyframes([\n *   style({ backgroundColor: \"red\", offset: 0 }),\n *   style({ backgroundColor: \"blue\", offset: 0.2 }),\n *   style({ backgroundColor: \"orange\", offset: 0.3 }),\n *   style({ backgroundColor: \"black\", offset: 1 })\n * ]))\n * ```\n *\n * If there are no `offset` values specified in the style entries, the offsets\n * are calculated automatically.\n *\n * ```ts\n * animate(\"5s\", keyframes([\n *   style({ backgroundColor: \"red\" }) // offset = 0\n *   style({ backgroundColor: \"blue\" }) // offset = 0.33\n *   style({ backgroundColor: \"orange\" }) // offset = 0.66\n *   style({ backgroundColor: \"black\" }) // offset = 1\n * ]))\n *```\n\n * @publicApi\n *\n * @deprecated 20.2 Use `animate.enter` or `animate.leave` instead. Intent to remove in v23\n */\nfunction keyframes(steps) {\n    return { type: AnimationMetadataType.Keyframes, steps };\n}\n/**\n * Declares an animation transition which is played when a certain specified condition is met.\n *\n * @param stateChangeExpr A string with a specific format or a function that specifies when the\n * animation transition should occur (see [State Change Expression](#state-change-expression)).\n *\n * @param steps One or more animation objects that represent the animation's instructions.\n *\n * @param options An options object that can be used to specify a delay for the animation or provide\n * custom parameters for it.\n *\n * @returns An object that encapsulates the transition data.\n *\n * @usageNotes\n *\n * ### State Change Expression\n *\n * The State Change Expression instructs Angular when to run the transition's animations, it can\n *either be\n *  - a string with a specific syntax\n *  - or a function that compares the previous and current state (value of the expression bound to\n *    the element's trigger) and returns `true` if the transition should occur or `false` otherwise\n *\n * The string format can be:\n *  - `fromState => toState`, which indicates that the transition's animations should occur then the\n *    expression bound to the trigger's element goes from `fromState` to `toState`\n *\n *    _Example:_\n *      ```ts\n *        transition('open => closed', animate('.5s ease-out', style({ height: 0 }) ))\n *      ```\n *\n *  - `fromState <=> toState`, which indicates that the transition's animations should occur then\n *    the expression bound to the trigger's element goes from `fromState` to `toState` or vice versa\n *\n *    _Example:_\n *      ```ts\n *        transition('enabled <=> disabled', animate('1s cubic-bezier(0.8,0.3,0,1)'))\n *      ```\n *\n *  - `:enter`/`:leave`, which indicates that the transition's animations should occur when the\n *    element enters or exists the DOM\n *\n *    _Example:_\n *      ```ts\n *        transition(':enter', [\n *          style({ opacity: 0 }),\n *          animate('500ms', style({ opacity: 1 }))\n *        ])\n *      ```\n *\n *  - `:increment`/`:decrement`, which indicates that the transition's animations should occur when\n *    the numerical expression bound to the trigger's element has increased in value or decreased\n *\n *    _Example:_\n *      ```ts\n *        transition(':increment', query('@counter', animateChild()))\n *      ```\n *\n *  - a sequence of any of the above divided by commas, which indicates that transition's animations\n *    should occur whenever one of the state change expressions matches\n *\n *    _Example:_\n *      ```ts\n *        transition(':increment, * => enabled, :enter', animate('1s ease', keyframes([\n *          style({ transform: 'scale(1)', offset: 0}),\n *          style({ transform: 'scale(1.1)', offset: 0.7}),\n *          style({ transform: 'scale(1)', offset: 1})\n *        ]))),\n *      ```\n *\n * Also note that in such context:\n *  - `void` can be used to indicate the absence of the element\n *  - asterisks can be used as wildcards that match any state\n *  - (as a consequence of the above, `void => *` is equivalent to `:enter` and `* => void` is\n *    equivalent to `:leave`)\n *  - `true` and `false` also match expression values of `1` and `0` respectively (but do not match\n *    _truthy_ and _falsy_ values)\n *\n * <div class=\"docs-alert docs-alert-helpful\">\n *\n *  Be careful about entering end leaving elements as their transitions present a common\n *  pitfall for developers.\n *\n *  Note that when an element with a trigger enters the DOM its `:enter` transition always\n *  gets executed, but its `:leave` transition will not be executed if the element is removed\n *  alongside its parent (as it will be removed \"without warning\" before its transition has\n *  a chance to be executed, the only way that such transition can occur is if the element\n *  is exiting the DOM on its own).\n *\n *\n * </div>\n *\n * ### Animating to a Final State\n *\n * If the final step in a transition is a call to `animate()` that uses a timing value\n * with no `style` data, that step is automatically considered the final animation arc,\n * for the element to reach the final state, in such case Angular automatically adds or removes\n * CSS styles to ensure that the element is in the correct final state.\n *\n *\n * ### Usage Examples\n *\n *  - Transition animations applied based on\n *    the trigger's expression value\n *\n *   ```html\n *   <div [@myAnimationTrigger]=\"myStatusExp\">\n *    ...\n *   </div>\n *   ```\n *\n *   ```ts\n *   trigger(\"myAnimationTrigger\", [\n *     ..., // states\n *     transition(\"on => off, open => closed\", animate(500)),\n *     transition(\"* <=> error\", query('.indicator', animateChild()))\n *   ])\n *   ```\n *\n *  - Transition animations applied based on custom logic dependent\n *    on the trigger's expression value and provided parameters\n *\n *    ```html\n *    <div [@myAnimationTrigger]=\"{\n *     value: stepName,\n *     params: { target: currentTarget }\n *    }\">\n *     ...\n *    </div>\n *    ```\n *\n *    ```ts\n *    trigger(\"myAnimationTrigger\", [\n *      ..., // states\n *      transition(\n *        (fromState, toState, _element, params) =>\n *          ['firststep', 'laststep'].includes(fromState.toLowerCase())\n *          && toState === params?.['target'],\n *        animate('1s')\n *      )\n *    ])\n *    ```\n *\n * @publicApi\n *\n * @deprecated 20.2 Use `animate.enter` or `animate.leave` instead. Intent to remove in v23\n **/\nfunction transition(stateChangeExpr, steps, options = null) {\n    return { type: AnimationMetadataType.Transition, expr: stateChangeExpr, animation: steps, options };\n}\n/**\n * Produces a reusable animation that can be invoked in another animation or sequence,\n * by calling the `useAnimation()` function.\n *\n * @param steps One or more animation objects, as returned by the `animate()`\n * or `sequence()` function, that form a transformation from one state to another.\n * A sequence is used by default when you pass an array.\n * @param options An options object that can contain a delay value for the start of the\n * animation, and additional developer-defined parameters.\n * Provided values for additional parameters are used as defaults,\n * and override values can be passed to the caller on invocation.\n * @returns An object that encapsulates the animation data.\n *\n * @usageNotes\n * The following example defines a reusable animation, providing some default parameter\n * values.\n *\n * ```ts\n * var fadeAnimation = animation([\n *   style({ opacity: '{{ start }}' }),\n *   animate('{{ time }}',\n *   style({ opacity: '{{ end }}'}))\n *   ],\n *   { params: { time: '1000ms', start: 0, end: 1 }});\n * ```\n *\n * The following invokes the defined animation with a call to `useAnimation()`,\n * passing in override parameter values.\n *\n * ```js\n * useAnimation(fadeAnimation, {\n *   params: {\n *     time: '2s',\n *     start: 1,\n *     end: 0\n *   }\n * })\n * ```\n *\n * If any of the passed-in parameter values are missing from this call,\n * the default values are used. If one or more parameter values are missing before a step is\n * animated, `useAnimation()` throws an error.\n *\n * @publicApi\n *\n * @deprecated 20.2 Use `animate.enter` or `animate.leave` instead. Intent to remove in v23\n */\nfunction animation(steps, options = null) {\n    return { type: AnimationMetadataType.Reference, animation: steps, options };\n}\n/**\n * Executes a queried inner animation element within an animation sequence.\n *\n * @param options An options object that can contain a delay value for the start of the\n * animation, and additional override values for developer-defined parameters.\n * @return An object that encapsulates the child animation data.\n *\n * @usageNotes\n * Each time an animation is triggered in Angular, the parent animation\n * has priority and any child animations are blocked. In order\n * for a child animation to run, the parent animation must query each of the elements\n * containing child animations, and run them using this function.\n *\n * Note that this feature is designed to be used with `query()` and it will only work\n * with animations that are assigned using the Angular animation library. CSS keyframes\n * and transitions are not handled by this API.\n *\n * @publicApi\n *\n * @deprecated 20.2 Use `animate.enter` or `animate.leave` instead. Intent to remove in v23\n */\nfunction animateChild(options = null) {\n    return { type: AnimationMetadataType.AnimateChild, options };\n}\n/**\n * Starts a reusable animation that is created using the `animation()` function.\n *\n * @param animation The reusable animation to start.\n * @param options An options object that can contain a delay value for the start of\n * the animation, and additional override values for developer-defined parameters.\n * @return An object that contains the animation parameters.\n *\n * @publicApi\n *\n * @deprecated 20.2 Use `animate.enter` or `animate.leave` instead. Intent to remove in v23\n */\nfunction useAnimation(animation, options = null) {\n    return { type: AnimationMetadataType.AnimateRef, animation, options };\n}\n/**\n * Finds one or more inner elements within the current element that is\n * being animated within a sequence. Use with `animate()`.\n *\n * @param selector The element to query, or a set of elements that contain Angular-specific\n * characteristics, specified with one or more of the following tokens.\n *  - `query(\":enter\")` or `query(\":leave\")` : Query for newly inserted/removed elements (not\n *     all elements can be queried via these tokens, see\n *     [Entering and Leaving Elements](#entering-and-leaving-elements))\n *  - `query(\":animating\")` : Query all currently animating elements.\n *  - `query(\"@triggerName\")` : Query elements that contain an animation trigger.\n *  - `query(\"@*\")` : Query all elements that contain an animation triggers.\n *  - `query(\":self\")` : Include the current element into the animation sequence.\n *\n * @param animation One or more animation steps to apply to the queried element or elements.\n * An array is treated as an animation sequence.\n * @param options An options object. Use the 'limit' field to limit the total number of\n * items to collect.\n * @return An object that encapsulates the query data.\n *\n * @usageNotes\n *\n * ### Multiple Tokens\n *\n * Tokens can be merged into a combined query selector string. For example:\n *\n * ```ts\n *  query(':self, .record:enter, .record:leave, @subTrigger', [...])\n * ```\n *\n * The `query()` function collects multiple elements and works internally by using\n * `element.querySelectorAll`. Use the `limit` field of an options object to limit\n * the total number of items to be collected. For example:\n *\n * ```js\n * query('div', [\n *   animate(...),\n *   animate(...)\n * ], { limit: 1 })\n * ```\n *\n * By default, throws an error when zero items are found. Set the\n * `optional` flag to ignore this error. For example:\n *\n * ```js\n * query('.some-element-that-may-not-be-there', [\n *   animate(...),\n *   animate(...)\n * ], { optional: true })\n * ```\n *\n * ### Entering and Leaving Elements\n *\n * Not all elements can be queried via the `:enter` and `:leave` tokens, the only ones\n * that can are those that Angular assumes can enter/leave based on their own logic\n * (if their insertion/removal is simply a consequence of that of their parent they\n * should be queried via a different token in their parent's `:enter`/`:leave` transitions).\n *\n * The only elements Angular assumes can enter/leave based on their own logic (thus the only\n * ones that can be queried via the `:enter` and `:leave` tokens) are:\n *  - Those inserted dynamically (via `ViewContainerRef`)\n *  - Those that have a structural directive (which, under the hood, are a subset of the above ones)\n *\n * <div class=\"docs-alert docs-alert-helpful\">\n *\n *  Note that elements will be successfully queried via `:enter`/`:leave` even if their\n *  insertion/removal is not done manually via `ViewContainerRef`or caused by their structural\n *  directive (e.g. they enter/exit alongside their parent).\n *\n * </div>\n *\n * <div class=\"docs-alert docs-alert-important\">\n *\n *  There is an exception to what previously mentioned, besides elements entering/leaving based on\n *  their own logic, elements with an animation trigger can always be queried via `:leave` when\n * their parent is also leaving.\n *\n * </div>\n *\n * ### Usage Example\n *\n * The following example queries for inner elements and animates them\n * individually using `animate()`.\n *\n * ```angular-ts\n * @Component({\n *   selector: 'inner',\n *   template: `\n *     <div [@queryAnimation]=\"exp\">\n *       <h1>Title</h1>\n *       <div class=\"content\">\n *         Blah blah blah\n *       </div>\n *     </div>\n *   `,\n *   animations: [\n *    trigger('queryAnimation', [\n *      transition('* => goAnimate', [\n *        // hide the inner elements\n *        query('h1', style({ opacity: 0 })),\n *        query('.content', style({ opacity: 0 })),\n *\n *        // animate the inner elements in, one by one\n *        query('h1', animate(1000, style({ opacity: 1 }))),\n *        query('.content', animate(1000, style({ opacity: 1 }))),\n *      ])\n *    ])\n *  ]\n * })\n * class Cmp {\n *   exp = '';\n *\n *   goAnimate() {\n *     this.exp = 'goAnimate';\n *   }\n * }\n * ```\n *\n * @publicApi\n *\n * @deprecated 20.2 Use `animate.enter` or `animate.leave` instead. Intent to remove in v23\n */\nfunction query(selector, animation, options = null) {\n    return { type: AnimationMetadataType.Query, selector, animation, options };\n}\n/**\n * Use within an animation `query()` call to issue a timing gap after\n * each queried item is animated.\n *\n * @param timings A delay value.\n * @param animation One ore more animation steps.\n * @returns An object that encapsulates the stagger data.\n *\n * @usageNotes\n * In the following example, a container element wraps a list of items stamped out\n * by an `@for` block. The container element contains an animation trigger that will later be set\n * to query for each of the inner items.\n *\n * Each time items are added, the opacity fade-in animation runs,\n * and each removed item is faded out.\n * When either of these animations occur, the stagger effect is\n * applied after each item's animation is started.\n *\n * ```html\n * <!-- list.component.html -->\n * <button (click)=\"toggle()\">Show / Hide Items</button>\n * <hr />\n * <div [@listAnimation]=\"items.length\">\n *   @for(item of items; track $index) {\n *      <div>{{ item }}</div>\n *   }\n * </div>\n * ```\n *\n * Here is the component code:\n *\n * ```ts\n * import {trigger, transition, style, animate, query, stagger} from '@angular/animations';\n * @Component({\n *   templateUrl: 'list.component.html',\n *   animations: [\n *     trigger('listAnimation', [\n *     ...\n *     ])\n *   ]\n * })\n * class ListComponent {\n *   items = [];\n *\n *   showItems() {\n *     this.items = [0,1,2,3,4];\n *   }\n *\n *   hideItems() {\n *     this.items = [];\n *   }\n *\n *   toggle() {\n *     this.items.length ? this.hideItems() : this.showItems();\n *    }\n *  }\n * ```\n *\n * Here is the animation trigger code:\n *\n * ```ts\n * trigger('listAnimation', [\n *   transition('* => *', [ // each time the binding value changes\n *     query(':leave', [\n *       stagger(100, [\n *         animate('0.5s', style({ opacity: 0 }))\n *       ])\n *     ]),\n *     query(':enter', [\n *       style({ opacity: 0 }),\n *       stagger(100, [\n *         animate('0.5s', style({ opacity: 1 }))\n *       ])\n *     ])\n *   ])\n * ])\n * ```\n *\n * @publicApi\n *\n * @deprecated 20.2 Use `animate.enter` or `animate.leave` instead. Intent to remove in v23\n */\nfunction stagger(timings, animation) {\n    return { type: AnimationMetadataType.Stagger, timings, animation };\n}\n\n/**\n * An empty programmatic controller for reusable animations.\n * Used internally when animations are disabled, to avoid\n * checking for the null case when an animation player is expected.\n *\n * @see {@link animate}\n * @see {@link AnimationPlayer}\n *\n * @publicApi\n *\n * @deprecated 20.2 Use `animate.enter` or `animate.leave` instead. Intent to remove in v23\n */\nclass NoopAnimationPlayer {\n    _onDoneFns = [];\n    _onStartFns = [];\n    _onDestroyFns = [];\n    _originalOnDoneFns = [];\n    _originalOnStartFns = [];\n    _started = false;\n    _destroyed = false;\n    _finished = false;\n    _position = 0;\n    parentPlayer = null;\n    totalTime;\n    constructor(duration = 0, delay = 0) {\n        this.totalTime = duration + delay;\n    }\n    _onFinish() {\n        if (!this._finished) {\n            this._finished = true;\n            this._onDoneFns.forEach((fn) => fn());\n            this._onDoneFns = [];\n        }\n    }\n    onStart(fn) {\n        this._originalOnStartFns.push(fn);\n        this._onStartFns.push(fn);\n    }\n    onDone(fn) {\n        this._originalOnDoneFns.push(fn);\n        this._onDoneFns.push(fn);\n    }\n    onDestroy(fn) {\n        this._onDestroyFns.push(fn);\n    }\n    hasStarted() {\n        return this._started;\n    }\n    init() { }\n    play() {\n        if (!this.hasStarted()) {\n            this._onStart();\n            this.triggerMicrotask();\n        }\n        this._started = true;\n    }\n    /** @internal */\n    triggerMicrotask() {\n        queueMicrotask(() => this._onFinish());\n    }\n    _onStart() {\n        this._onStartFns.forEach((fn) => fn());\n        this._onStartFns = [];\n    }\n    pause() { }\n    restart() { }\n    finish() {\n        this._onFinish();\n    }\n    destroy() {\n        if (!this._destroyed) {\n            this._destroyed = true;\n            if (!this.hasStarted()) {\n                this._onStart();\n            }\n            this.finish();\n            this._onDestroyFns.forEach((fn) => fn());\n            this._onDestroyFns = [];\n        }\n    }\n    reset() {\n        this._started = false;\n        this._finished = false;\n        this._onStartFns = this._originalOnStartFns;\n        this._onDoneFns = this._originalOnDoneFns;\n    }\n    setPosition(position) {\n        this._position = this.totalTime ? position * this.totalTime : 1;\n    }\n    getPosition() {\n        return this.totalTime ? this._position / this.totalTime : 1;\n    }\n    /** @internal */\n    triggerCallback(phaseName) {\n        const methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;\n        methods.forEach((fn) => fn());\n        methods.length = 0;\n    }\n}\n\n/**\n * A programmatic controller for a group of reusable animations.\n * Used internally to control animations.\n *\n * @see {@link AnimationPlayer}\n * @see {@link animations/group group}\n *\n */\nclass AnimationGroupPlayer {\n    _onDoneFns = [];\n    _onStartFns = [];\n    _finished = false;\n    _started = false;\n    _destroyed = false;\n    _onDestroyFns = [];\n    parentPlayer = null;\n    totalTime = 0;\n    players;\n    constructor(_players) {\n        this.players = _players;\n        let doneCount = 0;\n        let destroyCount = 0;\n        let startCount = 0;\n        const total = this.players.length;\n        if (total == 0) {\n            queueMicrotask(() => this._onFinish());\n        }\n        else {\n            this.players.forEach((player) => {\n                player.onDone(() => {\n                    if (++doneCount == total) {\n                        this._onFinish();\n                    }\n                });\n                player.onDestroy(() => {\n                    if (++destroyCount == total) {\n                        this._onDestroy();\n                    }\n                });\n                player.onStart(() => {\n                    if (++startCount == total) {\n                        this._onStart();\n                    }\n                });\n            });\n        }\n        this.totalTime = this.players.reduce((time, player) => Math.max(time, player.totalTime), 0);\n    }\n    _onFinish() {\n        if (!this._finished) {\n            this._finished = true;\n            this._onDoneFns.forEach((fn) => fn());\n            this._onDoneFns = [];\n        }\n    }\n    init() {\n        this.players.forEach((player) => player.init());\n    }\n    onStart(fn) {\n        this._onStartFns.push(fn);\n    }\n    _onStart() {\n        if (!this.hasStarted()) {\n            this._started = true;\n            this._onStartFns.forEach((fn) => fn());\n            this._onStartFns = [];\n        }\n    }\n    onDone(fn) {\n        this._onDoneFns.push(fn);\n    }\n    onDestroy(fn) {\n        this._onDestroyFns.push(fn);\n    }\n    hasStarted() {\n        return this._started;\n    }\n    play() {\n        if (!this.parentPlayer) {\n            this.init();\n        }\n        this._onStart();\n        this.players.forEach((player) => player.play());\n    }\n    pause() {\n        this.players.forEach((player) => player.pause());\n    }\n    restart() {\n        this.players.forEach((player) => player.restart());\n    }\n    finish() {\n        this._onFinish();\n        this.players.forEach((player) => player.finish());\n    }\n    destroy() {\n        this._onDestroy();\n    }\n    _onDestroy() {\n        if (!this._destroyed) {\n            this._destroyed = true;\n            this._onFinish();\n            this.players.forEach((player) => player.destroy());\n            this._onDestroyFns.forEach((fn) => fn());\n            this._onDestroyFns = [];\n        }\n    }\n    reset() {\n        this.players.forEach((player) => player.reset());\n        this._destroyed = false;\n        this._finished = false;\n        this._started = false;\n    }\n    setPosition(p) {\n        const timeAtPosition = p * this.totalTime;\n        this.players.forEach((player) => {\n            const position = player.totalTime ? Math.min(1, timeAtPosition / player.totalTime) : 1;\n            player.setPosition(position);\n        });\n    }\n    getPosition() {\n        const longestPlayer = this.players.reduce((longestSoFar, player) => {\n            const newPlayerIsLongest = longestSoFar === null || player.totalTime > longestSoFar.totalTime;\n            return newPlayerIsLongest ? player : longestSoFar;\n        }, null);\n        return longestPlayer != null ? longestPlayer.getPosition() : 0;\n    }\n    beforeDestroy() {\n        this.players.forEach((player) => {\n            if (player.beforeDestroy) {\n                player.beforeDestroy();\n            }\n        });\n    }\n    /** @internal */\n    triggerCallback(phaseName) {\n        const methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;\n        methods.forEach((fn) => fn());\n        methods.length = 0;\n    }\n}\n\nconst ɵPRE_STYLE = '!';\n\nexport { AUTO_STYLE, AnimationGroupPlayer, AnimationMetadataType, NoopAnimationPlayer, animate, animateChild, animation, group, keyframes, query, sequence, stagger, state, style, transition, trigger, useAnimation, ɵPRE_STYLE };\n\n","/**\n * @license Angular v20.2.1\n * (c) 2010-2025 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { inject, Injectable, ANIMATION_MODULE_TYPE, ɵRuntimeError as _RuntimeError, Inject, ViewEncapsulation } from '@angular/core';\nimport { sequence } from './private_export.mjs';\nexport { AUTO_STYLE, AnimationMetadataType, NoopAnimationPlayer, animate, animateChild, animation, group, keyframes, query, stagger, state, style, transition, trigger, useAnimation, AnimationGroupPlayer as ɵAnimationGroupPlayer, ɵPRE_STYLE } from './private_export.mjs';\n\n/**\n * An injectable service that produces an animation sequence programmatically within an\n * Angular component or directive.\n * Provided by the `BrowserAnimationsModule` or `NoopAnimationsModule`.\n *\n * @usageNotes\n *\n * To use this service, add it to your component or directive as a dependency.\n * The service is instantiated along with your component.\n *\n * Apps do not typically need to create their own animation players, but if you\n * do need to, follow these steps:\n *\n * 1. Use the <code>[AnimationBuilder.build](api/animations/AnimationBuilder#build)()</code> method\n * to create a programmatic animation. The method returns an `AnimationFactory` instance.\n *\n * 2. Use the factory object to create an `AnimationPlayer` and attach it to a DOM element.\n *\n * 3. Use the player object to control the animation programmatically.\n *\n * For example:\n *\n * ```ts\n * // import the service from BrowserAnimationsModule\n * import {AnimationBuilder} from '@angular/animations';\n * // require the service as a dependency\n * class MyCmp {\n *   constructor(private _builder: AnimationBuilder) {}\n *\n *   makeAnimation(element: any) {\n *     // first define a reusable animation\n *     const myAnimation = this._builder.build([\n *       style({ width: 0 }),\n *       animate(1000, style({ width: '100px' }))\n *     ]);\n *\n *     // use the returned factory object to create a player\n *     const player = myAnimation.create(element);\n *\n *     player.play();\n *   }\n * }\n * ```\n *\n * @publicApi\n *\n * @deprecated 20.2 Use `animate.enter` or `animate.leave` instead. Intent to remove in v23\n */\nclass AnimationBuilder {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.2.0-next.2\", ngImport: i0, type: AnimationBuilder, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.2.0-next.2\", ngImport: i0, type: AnimationBuilder, providedIn: 'root', useFactory: () => inject(BrowserAnimationBuilder) });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.2.0-next.2\", ngImport: i0, type: AnimationBuilder, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root', useFactory: () => inject(BrowserAnimationBuilder) }]\n        }] });\n/**\n * A factory object returned from the\n * <code>[AnimationBuilder.build](api/animations/AnimationBuilder#build)()</code>\n * method.\n *\n * @publicApi\n *\n * @deprecated 20.2 Use `animate.enter` or `animate.leave` instead. Intent to remove in v23\n */\nclass AnimationFactory {\n}\nclass BrowserAnimationBuilder extends AnimationBuilder {\n    animationModuleType = inject(ANIMATION_MODULE_TYPE, { optional: true });\n    _nextAnimationId = 0;\n    _renderer;\n    constructor(rootRenderer, doc) {\n        super();\n        const typeData = {\n            id: '0',\n            encapsulation: ViewEncapsulation.None,\n            styles: [],\n            data: { animation: [] },\n        };\n        this._renderer = rootRenderer.createRenderer(doc.body, typeData);\n        if (this.animationModuleType === null && !isAnimationRenderer(this._renderer)) {\n            // We only support AnimationRenderer & DynamicDelegationRenderer for this AnimationBuilder\n            throw new _RuntimeError(3600 /* RuntimeErrorCode.BROWSER_ANIMATION_BUILDER_INJECTED_WITHOUT_ANIMATIONS */, (typeof ngDevMode === 'undefined' || ngDevMode) &&\n                'Angular detected that the `AnimationBuilder` was injected, but animation support was not enabled. ' +\n                    'Please make sure that you enable animations in your application by calling `provideAnimations()` or `provideAnimationsAsync()` function.');\n        }\n    }\n    build(animation) {\n        const id = this._nextAnimationId;\n        this._nextAnimationId++;\n        const entry = Array.isArray(animation) ? sequence(animation) : animation;\n        issueAnimationCommand(this._renderer, null, id, 'register', [entry]);\n        return new BrowserAnimationFactory(id, this._renderer);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.2.0-next.2\", ngImport: i0, type: BrowserAnimationBuilder, deps: [{ token: i0.RendererFactory2 }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.2.0-next.2\", ngImport: i0, type: BrowserAnimationBuilder, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.2.0-next.2\", ngImport: i0, type: BrowserAnimationBuilder, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: i0.RendererFactory2 }, { type: Document, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }] });\nclass BrowserAnimationFactory extends AnimationFactory {\n    _id;\n    _renderer;\n    constructor(_id, _renderer) {\n        super();\n        this._id = _id;\n        this._renderer = _renderer;\n    }\n    create(element, options) {\n        return new RendererAnimationPlayer(this._id, element, options || {}, this._renderer);\n    }\n}\nclass RendererAnimationPlayer {\n    id;\n    element;\n    _renderer;\n    parentPlayer = null;\n    _started = false;\n    constructor(id, element, options, _renderer) {\n        this.id = id;\n        this.element = element;\n        this._renderer = _renderer;\n        this._command('create', options);\n    }\n    _listen(eventName, callback) {\n        return this._renderer.listen(this.element, `@@${this.id}:${eventName}`, callback);\n    }\n    _command(command, ...args) {\n        issueAnimationCommand(this._renderer, this.element, this.id, command, args);\n    }\n    onDone(fn) {\n        this._listen('done', fn);\n    }\n    onStart(fn) {\n        this._listen('start', fn);\n    }\n    onDestroy(fn) {\n        this._listen('destroy', fn);\n    }\n    init() {\n        this._command('init');\n    }\n    hasStarted() {\n        return this._started;\n    }\n    play() {\n        this._command('play');\n        this._started = true;\n    }\n    pause() {\n        this._command('pause');\n    }\n    restart() {\n        this._command('restart');\n    }\n    finish() {\n        this._command('finish');\n    }\n    destroy() {\n        this._command('destroy');\n    }\n    reset() {\n        this._command('reset');\n        this._started = false;\n    }\n    setPosition(p) {\n        this._command('setPosition', p);\n    }\n    getPosition() {\n        return unwrapAnimationRenderer(this._renderer)?.engine?.players[this.id]?.getPosition() ?? 0;\n    }\n    totalTime = 0;\n}\nfunction issueAnimationCommand(renderer, element, id, command, args) {\n    renderer.setProperty(element, `@@${id}:${command}`, args);\n}\n/**\n * The following 2 methods cannot reference their correct types (AnimationRenderer &\n * DynamicDelegationRenderer) since this would introduce a import cycle.\n */\nfunction unwrapAnimationRenderer(renderer) {\n    const type = renderer.ɵtype;\n    if (type === 0 /* AnimationRendererType.Regular */) {\n        return renderer;\n    }\n    else if (type === 1 /* AnimationRendererType.Delegated */) {\n        return renderer.animationRenderer;\n    }\n    return null;\n}\nfunction isAnimationRenderer(renderer) {\n    const type = renderer.ɵtype;\n    return type === 0 /* AnimationRendererType.Regular */ || type === 1 /* AnimationRendererType.Delegated */;\n}\n\nexport { AnimationBuilder, AnimationFactory, sequence, BrowserAnimationBuilder as ɵBrowserAnimationBuilder };\n\n","import { trigger, transition, style as style$1, animate } from '@angular/animations';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, signal, inject, booleanAttribute, ContentChildren, ContentChild, Output, Input, ViewEncapsulation, ChangeDetectionStrategy, Component, NgModule } from '@angular/core';\nimport { SharedModule, PrimeTemplate } from 'primeng/api';\nimport { BaseComponent } from 'primeng/basecomponent';\nimport { TimesIcon } from 'primeng/icons';\nimport { Ripple } from 'primeng/ripple';\nimport { style } from '@primeuix/styles/message';\nimport { BaseStyle } from 'primeng/base';\n\nconst classes = {\n    root: ({ instance }) => ['p-message p-component p-message-' + instance.severity, 'p-message-' + instance.variant, { 'p-message-sm': instance.size === 'small', 'p-message-lg': instance.size === 'large' }],\n    content: 'p-message-content',\n    icon: 'p-message-icon',\n    text: 'p-message-text',\n    closeButton: 'p-message-close-button',\n    closeIcon: 'p-message-close-icon'\n};\nclass MessageStyle extends BaseStyle {\n    name = 'message';\n    theme = style;\n    classes = classes;\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.1.3\", ngImport: i0, type: MessageStyle, deps: null, target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.1.3\", ngImport: i0, type: MessageStyle });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.1.3\", ngImport: i0, type: MessageStyle, decorators: [{\n            type: Injectable\n        }] });\n/**\n *\n * Message groups a collection of contents in tabs.\n *\n * [Live Demo](https://www.primeng.org/message/)\n *\n * @module messagestyle\n *\n */\nvar MessageClasses;\n(function (MessageClasses) {\n    /**\n     * Class name of the root element\n     */\n    MessageClasses[\"root\"] = \"p-message\";\n    /**\n     * Class name of the content element\n     */\n    MessageClasses[\"content\"] = \"p-message-content\";\n    /**\n     * Class name of the icon element\n     */\n    MessageClasses[\"icon\"] = \"p-message-icon\";\n    /**\n     * Class name of the text element\n     */\n    MessageClasses[\"text\"] = \"p-message-text\";\n    /**\n     * Class name of the close button element\n     */\n    MessageClasses[\"closeButton\"] = \"p-message-close-button\";\n    /**\n     * Class name of the close icon element\n     */\n    MessageClasses[\"closeIcon\"] = \"p-message-close-icon\";\n})(MessageClasses || (MessageClasses = {}));\n\n/**\n * Message groups a collection of contents in tabs.\n * @group Components\n */\nclass Message extends BaseComponent {\n    /**\n     * Severity level of the message.\n     * @defaultValue 'info'\n     * @group Props\n     */\n    severity = 'info';\n    /**\n     * Text content.\n     * @deprecated since v20.0.0. Use content projection instead '<p-message>Content</p-message>'.\n     * @group Props\n     */\n    text;\n    /**\n     * Whether displaying messages would be escaped or not.\n     * @deprecated since v20.0.0. Use content projection instead '<p-message>Content</p-message>'.\n     * @group Props\n     */\n    escape = true;\n    /**\n     * Inline style of the component.\n     * @group Props\n     */\n    style;\n    /**\n     * Style class of the component.\n     * @group Props\n     */\n    styleClass;\n    /**\n     * Whether the message can be closed manually using the close icon.\n     * @group Props\n     * @defaultValue false\n     */\n    closable = false;\n    /**\n     * Icon to display in the message.\n     * @group Props\n     * @defaultValue undefined\n     */\n    icon;\n    /**\n     * Icon to display in the message close button.\n     * @group Props\n     * @defaultValue undefined\n     */\n    closeIcon;\n    /**\n     * Delay in milliseconds to close the message automatically.\n     * @defaultValue undefined\n     */\n    life;\n    /**\n     * Transition options of the show animation.\n     * @defaultValue '300ms ease-out'\n     * @group Props\n     */\n    showTransitionOptions = '300ms ease-out';\n    /**\n     * Transition options of the hide animation.\n     * @defaultValue '200ms cubic-bezier(0.86, 0, 0.07, 1)'\n     * @group Props\n     */\n    hideTransitionOptions = '200ms cubic-bezier(0.86, 0, 0.07, 1)';\n    /**\n     * Defines the size of the component.\n     * @group Props\n     */\n    size;\n    /**\n     * Specifies the input variant of the component.\n     * @group Props\n     */\n    variant;\n    /**\n     * Emits when the message is closed.\n     * @param {{ originalEvent: Event }} event - The event object containing the original event.\n     * @group Emits\n     */\n    onClose = new EventEmitter();\n    get closeAriaLabel() {\n        return this.config.translation.aria ? this.config.translation.aria.close : undefined;\n    }\n    visible = signal(true, ...(ngDevMode ? [{ debugName: \"visible\" }] : []));\n    _componentStyle = inject(MessageStyle);\n    /**\n     * Custom template of the message container.\n     * @group Templates\n     */\n    containerTemplate;\n    /**\n     * Custom template of the message icon.\n     * @group Templates\n     */\n    iconTemplate;\n    /**\n     * Custom template of the close icon.\n     * @group Templates\n     */\n    closeIconTemplate;\n    templates;\n    _containerTemplate;\n    _iconTemplate;\n    _closeIconTemplate;\n    ngOnInit() {\n        super.ngOnInit();\n        if (this.life) {\n            setTimeout(() => {\n                this.visible.set(false);\n            }, this.life);\n        }\n    }\n    ngAfterContentInit() {\n        this.templates?.forEach((item) => {\n            switch (item.getType()) {\n                case 'container':\n                    this._containerTemplate = item.template;\n                    break;\n                case 'icon':\n                    this._iconTemplate = item.template;\n                    break;\n                case 'closeicon':\n                    this._closeIconTemplate = item.template;\n                    break;\n            }\n        });\n    }\n    /**\n     * Closes the message.\n     * @param {Event} event - Browser event.\n     * @group Method\n     */\n    close(event) {\n        this.visible.set(false);\n        this.onClose.emit({ originalEvent: event });\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.1.3\", ngImport: i0, type: Message, deps: null, target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"20.1.3\", type: Message, isStandalone: true, selector: \"p-message\", inputs: { severity: \"severity\", text: \"text\", escape: [\"escape\", \"escape\", booleanAttribute], style: \"style\", styleClass: \"styleClass\", closable: [\"closable\", \"closable\", booleanAttribute], icon: \"icon\", closeIcon: \"closeIcon\", life: \"life\", showTransitionOptions: \"showTransitionOptions\", hideTransitionOptions: \"hideTransitionOptions\", size: \"size\", variant: \"variant\" }, outputs: { onClose: \"onClose\" }, providers: [MessageStyle], queries: [{ propertyName: \"containerTemplate\", first: true, predicate: [\"container\"] }, { propertyName: \"iconTemplate\", first: true, predicate: [\"icon\"] }, { propertyName: \"closeIconTemplate\", first: true, predicate: [\"closeicon\"] }, { propertyName: \"templates\", predicate: PrimeTemplate }], usesInheritance: true, ngImport: i0, template: `\n        @if (visible()) {\n            <div\n                class=\"p-message p-component\"\n                [attr.aria-live]=\"'polite'\"\n                [class]=\"cn(cx('root'), styleClass)\"\n                [attr.role]=\"'alert'\"\n                [@messageAnimation]=\"{\n                    value: 'visible()',\n                    params: {\n                        showTransitionParams: showTransitionOptions,\n                        hideTransitionParams: hideTransitionOptions\n                    }\n                }\"\n            >\n                <div [class]=\"cx('content')\">\n                    @if (iconTemplate || _iconTemplate) {\n                        <ng-container *ngTemplateOutlet=\"iconTemplate || iconTemplate\"></ng-container>\n                    }\n                    @if (icon) {\n                        <i [class]=\"cn(cx('icon'), icon)\"></i>\n                    }\n\n                    <div *ngIf=\"!escape; else escapeOut\">\n                        <span *ngIf=\"!escape\" [ngClass]=\"cx('text')\" [innerHTML]=\"text\"></span>\n                    </div>\n\n                    <ng-template #escapeOut>\n                        <span *ngIf=\"escape && text\" [ngClass]=\"cx('text')\">{{ text }}</span>\n                    </ng-template>\n\n                    @if (containerTemplate || _containerTemplate) {\n                        <ng-container *ngTemplateOutlet=\"containerTemplate || containerTemplate; context: { closeCallback: close.bind(this) }\"></ng-container>\n                    } @else {\n                        <span [ngClass]=\"cx('text')\">\n                            <ng-content></ng-content>\n                        </span>\n                    }\n                    @if (closable) {\n                        <button pRipple type=\"button\" [class]=\"cx('closeButton')\" (click)=\"close($event)\" [attr.aria-label]=\"closeAriaLabel\">\n                            @if (closeIcon) {\n                                <i [class]=\"cn(cx('closeIcon'), closeIcon)\" [ngClass]=\"closeIcon\"></i>\n                            }\n                            @if (closeIconTemplate || _closeIconTemplate) {\n                                <ng-container *ngTemplateOutlet=\"closeIconTemplate || _closeIconTemplate\"></ng-container>\n                            }\n                            @if (!closeIconTemplate && !_closeIconTemplate && !closeIcon) {\n                                <svg data-p-icon=\"times\" [class]=\"cx('closeIcon')\" />\n                            }\n                        </button>\n                    }\n                </div>\n            </div>\n        }\n    `, isInline: true, dependencies: [{ kind: \"ngmodule\", type: CommonModule }, { kind: \"directive\", type: i1.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i1.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"component\", type: TimesIcon, selector: \"[data-p-icon=\\\"times\\\"]\" }, { kind: \"directive\", type: Ripple, selector: \"[pRipple]\" }, { kind: \"ngmodule\", type: SharedModule }], animations: [\n            trigger('messageAnimation', [\n                transition(':enter', [style$1({ opacity: 0, transform: 'translateY(-25%)' }), animate('{{showTransitionParams}}')]),\n                transition(':leave', [\n                    animate('{{hideTransitionParams}}', style$1({\n                        height: 0,\n                        marginTop: 0,\n                        marginBottom: 0,\n                        marginLeft: 0,\n                        marginRight: 0,\n                        opacity: 0\n                    }))\n                ])\n            ])\n        ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.1.3\", ngImport: i0, type: Message, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'p-message',\n                    standalone: true,\n                    imports: [CommonModule, TimesIcon, Ripple, SharedModule],\n                    template: `\n        @if (visible()) {\n            <div\n                class=\"p-message p-component\"\n                [attr.aria-live]=\"'polite'\"\n                [class]=\"cn(cx('root'), styleClass)\"\n                [attr.role]=\"'alert'\"\n                [@messageAnimation]=\"{\n                    value: 'visible()',\n                    params: {\n                        showTransitionParams: showTransitionOptions,\n                        hideTransitionParams: hideTransitionOptions\n                    }\n                }\"\n            >\n                <div [class]=\"cx('content')\">\n                    @if (iconTemplate || _iconTemplate) {\n                        <ng-container *ngTemplateOutlet=\"iconTemplate || iconTemplate\"></ng-container>\n                    }\n                    @if (icon) {\n                        <i [class]=\"cn(cx('icon'), icon)\"></i>\n                    }\n\n                    <div *ngIf=\"!escape; else escapeOut\">\n                        <span *ngIf=\"!escape\" [ngClass]=\"cx('text')\" [innerHTML]=\"text\"></span>\n                    </div>\n\n                    <ng-template #escapeOut>\n                        <span *ngIf=\"escape && text\" [ngClass]=\"cx('text')\">{{ text }}</span>\n                    </ng-template>\n\n                    @if (containerTemplate || _containerTemplate) {\n                        <ng-container *ngTemplateOutlet=\"containerTemplate || containerTemplate; context: { closeCallback: close.bind(this) }\"></ng-container>\n                    } @else {\n                        <span [ngClass]=\"cx('text')\">\n                            <ng-content></ng-content>\n                        </span>\n                    }\n                    @if (closable) {\n                        <button pRipple type=\"button\" [class]=\"cx('closeButton')\" (click)=\"close($event)\" [attr.aria-label]=\"closeAriaLabel\">\n                            @if (closeIcon) {\n                                <i [class]=\"cn(cx('closeIcon'), closeIcon)\" [ngClass]=\"closeIcon\"></i>\n                            }\n                            @if (closeIconTemplate || _closeIconTemplate) {\n                                <ng-container *ngTemplateOutlet=\"closeIconTemplate || _closeIconTemplate\"></ng-container>\n                            }\n                            @if (!closeIconTemplate && !_closeIconTemplate && !closeIcon) {\n                                <svg data-p-icon=\"times\" [class]=\"cx('closeIcon')\" />\n                            }\n                        </button>\n                    }\n                </div>\n            </div>\n        }\n    `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                    providers: [MessageStyle],\n                    animations: [\n                        trigger('messageAnimation', [\n                            transition(':enter', [style$1({ opacity: 0, transform: 'translateY(-25%)' }), animate('{{showTransitionParams}}')]),\n                            transition(':leave', [\n                                animate('{{hideTransitionParams}}', style$1({\n                                    height: 0,\n                                    marginTop: 0,\n                                    marginBottom: 0,\n                                    marginLeft: 0,\n                                    marginRight: 0,\n                                    opacity: 0\n                                }))\n                            ])\n                        ])\n                    ]\n                }]\n        }], propDecorators: { severity: [{\n                type: Input\n            }], text: [{\n                type: Input\n            }], escape: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], style: [{\n                type: Input\n            }], styleClass: [{\n                type: Input\n            }], closable: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], icon: [{\n                type: Input\n            }], closeIcon: [{\n                type: Input\n            }], life: [{\n                type: Input\n            }], showTransitionOptions: [{\n                type: Input\n            }], hideTransitionOptions: [{\n                type: Input\n            }], size: [{\n                type: Input\n            }], variant: [{\n                type: Input\n            }], onClose: [{\n                type: Output\n            }], containerTemplate: [{\n                type: ContentChild,\n                args: ['container', { descendants: false }]\n            }], iconTemplate: [{\n                type: ContentChild,\n                args: ['icon', { descendants: false }]\n            }], closeIconTemplate: [{\n                type: ContentChild,\n                args: ['closeicon', { descendants: false }]\n            }], templates: [{\n                type: ContentChildren,\n                args: [PrimeTemplate]\n            }] } });\nclass MessageModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.1.3\", ngImport: i0, type: MessageModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"20.1.3\", ngImport: i0, type: MessageModule, imports: [Message, SharedModule], exports: [Message, SharedModule] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"20.1.3\", ngImport: i0, type: MessageModule, imports: [Message, SharedModule, SharedModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.1.3\", ngImport: i0, type: MessageModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [Message, SharedModule],\n                    exports: [Message, SharedModule]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Message, MessageClasses, MessageModule, MessageStyle };\n\n","import { Component, input } from '@angular/core';\nimport { MessageModule } from 'primeng/message';\n\n@Component({\n  selector: 'app-error-message',\n  imports: [MessageModule],\n  templateUrl: './error-message.html',\n  \n})\nexport class ErrorMessage {\n  message = input.required<string>();\n}\n"],"mappings":"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","names":["animation","AnimationMetadataType","animation","style","MessageClasses","ErrorMessage"],"x_google_ignoreList":[1,2,3]}